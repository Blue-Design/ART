import os
import sys
import SCons.cpp
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

Export('RTT_ROOT')

def fnProcessing(target, source, env):
    import sys
    import re
    import os
    from glob import glob

    wp = open ('%s'%target[0], 'wb')
    # wp.write(open('Arduino.c').read())
    wp.write('#include <Arduino.h>\n')

    types='''void 
    int char word long 
    float double byte long
    boolean 
    uint8_t uint16_t uint32_t 
    int8_t int16_t int32_t
    '''
    types=' | '.join(types.split())
    re_signature=re.compile(r"""^\s* (
        (?: (%s) \s+ )?
        \w+ \s*
        \( \s* ((%s) \s+ \*? \w+ (?:\s*,\s*)? )* \)
        ) \s* {? \s* $""" % (types,types), re.MULTILINE|re.VERBOSE)

    prototypes = {}

    for file in glob(os.path.realpath(os.curdir) + "/*.pde"):
        for line in open(file):
            result = re_signature.findall(line)
            if result:
                prototypes[result[0][0]] = result[0][1]

    for name in prototypes.keys():
        print ("%s;"%(name))
        wp.write("%s;\n"%name)

    for file in glob(os.path.realpath(os.curdir) + "/*.pde"):
        print file, TARGET
        if not os.path.samefile(file, TARGET+".pde"):
                wp.write('#line 1 "%s"\r\n' % file)
                wp.write(open(file).read())

    # Add this preprocessor directive to localize the errors.
    sourcePath = str(source[0]).replace('\\', '\\\\');
    wp.write('#line 1 "%s"\r\n' % sourcePath)
    wp.write(open('%s'%source[0]).read())

# add target option
AddOption('--app',
  dest='app',
  nargs=1, type='string',
  action='store',
  metavar='DIR',
  help='installation prefix')

# add target option
AddOption('--type',
  dest='type',
  nargs=1, type='string',
  action='store',
  metavar='DIR',
  help='installation prefix')

app = GetOption('app')

if GetOption('type') == 'ext':
    linkflags = rtconfig.LFLAGS + ' -e 0'
else:
    linkflags = rtconfig.LFLAGS + ' -static -e main -lcore'

sconstruct = File('SConstruct')
fn = sconstruct.rfile()
name = fn.name
building_dir = os.path.dirname(fn.abspath)

env = Environment(tools = ['mingw'],
        AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
        CC = rtconfig.CC, CCFLAGS = rtconfig.CFLAGS,
        CXX = rtconfig.CXX, AR = rtconfig.AR, ARFLAGS = '-rc',
        LINK = rtconfig.LINK, LINKFLAGS = linkflags,
        LIBPATH = [os.path.join(building_dir, '..', 'cores')],
        CPPPATH = [os.path.join(building_dir, '..', 'platform'), 
                os.path.join(building_dir, '..', 'cores'), 
                os.path.join(building_dir, '..', 'cores', 'arduino'), 
                RTT_ROOT + '/include',
                RTT_ROOT + '/components/finsh',
                RTT_ROOT + '/components/dfs', 
                RTT_ROOT + '/components/dfs/include',
                RTT_ROOT + '/components/drivers/include',
                RTT_ROOT + '/components/libc/newlib',
                ])
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)

env.Append(BUILDERS = {'Processing':Builder(action = fnProcessing,
        suffix = '.cpp', src_suffix = '.pde')})
Export('env')

PrepareModuleBuilding(env, RTT_ROOT)

objs = SConscript(os.path.join(app, 'Sconscript'))
TARGET = os.path.join('root', app + '.' + rtconfig.TARGET_EXT)

# change link order 
env['LINKCOM'] = '$LINK start.lib $SOURCES -o $TARGET $LINKFLAGS $__RPATH $_LIBDIRFLAGS $_LIBFLAGS end.lib'

# build program 
env.Program(TARGET, objs)

